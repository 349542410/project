<?php
/**
 * 在线下单
 */
namespace WebUser\Controller;
use Think\Controller;
use Think\Log;

class OrderController extends BaseController {

    public function _initialize() {
        parent::_initialize();
        $Wclient = new \HproseHttpClient(C('WAPIURL').'/Order');
        $this->Wclient = $Wclient;

        // 定义最大商品条数
        define('MAX_ORDERNO', 31);
    }

    /**
     * 在线下单 视图
     */
    public function index(){

        //生成一个一次性的令牌以防止重复提交表单
        $_SESSION['token'] = md5(microtime(true));

        $user_id = session('mkuser')['uid'];

        $tranline = $this->tranline;
        $ID_TYPE = C('ID_TYPE');

        vendor('Hprose.HproseHttpClient');
        $sender_client = new \HproseHttpClient(C('RAPIURL').'/UserSender');
        $addr_client = new \HproseHttpClient(C('RAPIURL').'/UserAddressee');

        $sender_data = $sender_client->s_find(array('user_id'=>$user_id, 'is_default'=>'1'))['info'];
        $addr_data = $addr_client->search(array('user_id'=>$user_id, 'is_default'=>'1'), '')['data'][0];
        
        $addr_data_json = json_encode(array(
            'success' => true,
            'info' => $addr_client->search(array('user_id'=>$user_id, 'is_default'=>'1'), '')['data'][0],
        ));


        // dump($sender_data);
        // dump($addr_data_json);
        $this->assign('sender_data_json', json_encode($sender_data));
        $this->assign('addr_data_json', $addr_data_json);
        $this->assign('sender_id', $sender_data['id']);
        $this->assign('addr_id', $addr_data['id']);


        // 从redis里取出货品声明里的选项信息
        $category_list = array();
        $Host = C('Redis')['Host'];
        $Port = C('Redis')['Port'];
        $Auth = C('Redis')['Auth'];
        try{
            $redis = new \Redis();
            $redis->connect($Host,$Port,$overtime);
            $redis->auth($Auth);

            $category_list = unserialize($redis->get('category_list'));
        }catch(\RedisException $e){
            
        }
        if(empty($category_list)){
            $this->assign('category_list', "{options:[],selectedOptions,[]}");
        }else{
            $this->assign('category_list', json_encode($category_list));
        }

//         dump($category_list);

        // dump($tranline);

        self::assign('tranline',$tranline);
        self::assign('user_id',$user_id);
        // self::assign('info',$info);
        self::assign('ID_TYPE',$ID_TYPE);

        $this->display();

    }


    // ajax获取收件人信息
    // liao ya di 2017-10-16
    public function get_addr_info_ajax(){

        if(empty($_GET['addr_id'])){
            echo \json_encode(array(
                'success' => false,
                'info' => '缺少参数',
            ));
            die;
        }

        $x_client = new \HproseHttpClient(C('RAPIURL').'/UserAddressee');
        $addr_id = I('get.addr_id');
        $res = $x_client->search(array('id'=>$addr_id),'');

        if($res['data'][0]['id_card_front']!=='none'){
            $res['data'][0]['id_card_front'] = WU_FILE . $res['data'][0]['id_card_front'];
        }else{
            $res['data'][0]['id_card_front'] = C('TMPL_PARSE_STRING')['__MEMBER__'] . '/images/pho_front.png';
        }
        if($res['data'][0]['id_card_back']!=='none'){
            $res['data'][0]['id_card_back'] = WU_FILE . $res['data'][0]['id_card_back'];
        }else{
            $res['data'][0]['id_card_back'] = C('TMPL_PARSE_STRING')['__MEMBER__'] . '/images/pho_back.png';
        }

        echo json_encode(array(
            'success' => true,
            'info' => $res['data'][0],
        ));

    }

    /**
     * ajax查询出相关身份证信息
     *
     *
     */
    public function find_indo_data(){
        if(empty($_GET['true_name']) || empty($_GET['tel'])){
            echo \json_encode(array(
                'success' => false,
                'info' => '缺少参数',
            ));
            die;
        }

        $true_name = I('get.true_name');
        $tel       = I('get.tel');


    }

    // 选择收件人
    // liao ya id 2017-10-16
    public function selectRecipient(){

        define('PAGE_COUNT',4);     //每页显示数量

        $client = new \HproseHttpClient(C('RAPIURL').'/UserAddressee');
        $user_id = session("user_id");


        //中文搜索乱码
        // foreach($_GET as $k=>$v){
        //     if (mb_check_encoding($v, 'gbk')){
        //         // $_GET[$k] = iconv('gbk', 'utf-8', $v);
        //         // $_GET[$k] = mb_convert_encoding($v, 'utf-8', 'gbk');
        //     }
        // }

        //拼凑查询条件
        $map['user_id'] = array('eq',$user_id);
        if(!empty($_GET['search_addr'])){
            $s = trim(I('get.search_addr'));

            // if(mb_check_encoding($s, 'gbk')){
            //     $s = mb_convert_encoding($s, 'utf-8', 'gbk');
            // }

            $map['_string'] = 'a.name like "%' . $s . '%" or tel = "' . $s . '"';
        }
        

        $result = $client->search($map,'');
        $count = count($result['data']);

        if($count<PAGE_COUNT*$_GET['p']){
            //如果页数不够
            $_GET['p'] = ceil($count/PAGE_COUNT);
            // $_GET['p'] = 1;
        }

        $Page = new \Think\Page($count,PAGE_COUNT);

        $Page->rollPage = 5;
        $Page->setConfig('prev', L('PrevPage'));    //上一页
        $Page->setConfig('next', L('NextPage'));    //下一页
        $Page->setConfig('first', L('FirstPage'));  //第一页
        $Page->setConfig('last', L('LastPage'));    //最后一页
        $Page->setConfig('header', '<span class="rows">'.L('TotalPage',array('n'=>'%TOTAL_ROW%')).'</span>');
        $Page -> setConfig ( 'theme', '%FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END% %HEADER%' );
        $show = $Page->show();
        $list = $client->search($map,$Page->firstRow.','.$Page->listRows);

        // dump($list['data']);

        $this->assign('data',$list['data']);
        $this->assign('page',$show);

        $this->display();

    }

    // 姓名+证件类型+证件号码 不在收件人列表中时，则添加到收件人列表中去
    // liao ya di 2017-10-18
    public function insert_addr_list($data){

        foreach($data as $k=>$v){
            $data[$k] = trim($v);
        }

        $client = new \HproseHttpClient(C('RAPIURL').'/UserAddressee');

        $where['user_id'] = $data["user_id"];
        $where['name'] = $data["name"];
        $where['cre_type'] = $data["cre_type"];
        $where['cre_num'] = $data["cre_num"];

        // $data['address_alias'] = 'none';
        $data['address_alias'] = '';

        $result = $client->search($where,'');

        if(empty($result['data'])){

            $image = new \Think\Image();

            if($data['id_card_front']!='none'){
                $addr_arr = explode('/',$data['id_card_front']);
                $addr_v['savepath'] = '/' . $addr_arr[1] . '/' . $addr_arr[2] . '/';
                $addr_v['savename'] = $addr_arr[3];
                $small_url = WU_ABS_FILE . $addr_v['savepath'] . 'small_' . $addr_v['savename'];
                $image->open( WU_ABS_FILE . $addr_v['savepath'] . $addr_v['savename'] );
                $image->thumb(150,90,6)->save($small_url);
                $data['id_card_front_small'] = $addr_v['savepath'] . 'small_' . $addr_v['savename'];
            }

            if($data['id_card_back']!='none'){
                $addr_arr = explode('/',$data['id_card_back']);
                $addr_v['savepath'] = '/' . $addr_arr[1] . '/' . $addr_arr[2] . '/';
                $addr_v['savename'] = $addr_arr[3];
                $small_url = WU_ABS_FILE . $addr_v['savepath'] . 'small_' . $addr_v['savename'];
                $image->open( WU_ABS_FILE . $addr_v['savepath'] . $addr_v['savename'] );
                $image->thumb(150,90,6)->save($small_url);
                $data['id_card_back_small'] = $addr_v['savepath'] . 'small_' . $addr_v['savename'];
            }

            $res = $client->addUserAddressee($data);

            $res['info'] = L($res['info']);
            return $res;

        }else{
            return array(
                'success' => true,
                'info' => '',
            );
        }

    }

    // 检测价格
    // liao ya di 2017-10-20
    public function check_price($l_line_id,$l_price_arr){

        $client = new \HproseHttpClient(C('RAPIURL').'/UserAddressee');
        $line_res = $client->line_cat($l_line_id);

        $exchange_rate = C('US_TO_RMB_RATE');   //汇率
        define('BC_US_PRICE',floor(2000/$exchange_rate));      //BC线路最大金额限制
        define('CC_US_PRICE_1',floor(1000/$exchange_rate));    //收税时CC线路最大金额限制
        // define('CC_US_PRICE_2',floor(333/$exchange_rate));     //收税时CC线路最大金额限制
        // define('CC_US_PRICE_2',floor(800/$exchange_rate));     //收税时CC线路最大金额限制
        define('CC_US_PRICE_2',floor(2000/$exchange_rate));     //收税时CC线路最大金额限制

        //总金额（美元）
        $totle = 0;
        foreach($l_price_arr as $k=>$v){
            $totle += ( $v['price'] * $v['count'] );
        }

        if($line_res['bc_state']=='1'&&$line_res['cc_state']=='1'){
            //内部错误
            return array(
                'success' => false,
                'info' => 'l_server_err',
            );
        }else if($line_res['bc_state']=='1'){
            //BC
            // if(($totle*$exchange_rate)>=2000){
            if($totle>BC_US_PRICE){
                //总金额不能超过2000
                return array(
                    'success' => false,
                    'info' => 'l_price_failed_1,' . BC_US_PRICE,
                );
            }else{
                return array(
                    'success' => true,
                    'info' => '',
                );
            }
        }else if($line_res['cc_state']=='1'){
            //CC
            $p_info = array();
            //矩阵转置
            foreach($l_price_arr as $k1=>$v1){
                foreach($v1 as $k2=>$v2){
                    $p_info[$k2][$k1] = $v2;
                }
            }
            $o_client = new \HproseHttpClient(C('RAPIURL').'/OrderSea');
            $tax = $o_client->search_tax($p_info['rate_cat_id']);
            $tax_p = 0;
            foreach($tax as $tk=>$tv){
                $tax_p += $tv['price'];
            }
            if($tax_p>0){
                //需要收取税金
                if(count($l_price_arr)<=1){
                    //一条
                    //不限制金额
                    return array(
                        'success' => true,
                        'info' => '',
                    );
                }else{
                    //两条以上
                    // if($totle*$exchange_rate>=1000){
                    if($totle>CC_US_PRICE_1){
                        //总金额大于￥1000，只能保存一条数据
                        return array(
                            'success' => false,
                            'info' => 'l_price_failed_2,' . CC_US_PRICE_1,
                        );
                    }else{
                        return array(
                            'success' => true,
                            'info' => '',
                        );
                    }
                }
            }else{
                //不收取税金
                // if($totle*$exchange_rate>=333){
                if($totle>CC_US_PRICE_2){
                    //总金额不能超过￥333
                    return array(
                        'success' => false,
                        'info' => 'l_price_failed_3,' . CC_US_PRICE_2,
                    );
                }else{
                    return array(
                        'success' => true,
                        'info' => '',
                    );
                }
            }
        }else{
            //It's not BC and CC
            return array(
                'success' => true,
                'info' => '',
            );
        }
    }

    // 姓名 不在寄件人列表中时，则添加到寄件人列表中去
    // liao ya di 2017-10-24
    public function insert_sender($send_data){

        $where = array(
            'user_id' => $send_data['user_id'],
            's_name' => $send_data['s_name'],
        );
        $send_client = new \HproseHttpClient(C('RAPIURL').'/UserSender');
        $result = $send_client->s_find($where);
        if($result['success']&&empty($result['info'])){
            return $send_client->s_insert($send_data);
        }else{
            return array(
                'success' => true,
                'info' => '',
            );
        }

    }

    //上传购物小票
    //liao ya di
    private function shopping_receipt(){

        $shop_state = session('shop_state');
        if(empty($shop_state)||$shop_state!=1){
            //无需上传
            session('shop_state',null);
            return array();
        }
        session('shop_state',null);

        if(empty($_FILES['receipt_img'])||$_FILES['receipt_img']['error']!=0){
            //没有上传或者上传失败
            return array('receipt_img'=>'none');
        }

        $upload           = new \Think\Upload();            // 实例化上传类
        $upload->maxSize  = 4200000;                         // 设置附件上传大小  不超过800k
        $upload->exts     = array('jpg', 'png', 'jpeg');    // 设置附件上传类型
        $upload->rootPath = WU_ABS_FILE."/";                // 设置文件上传保存的根路径
        $upload->savePath = C('UPLOADS_ID_IMG');            // 设置文件上传的保存路径（相对于根路径）
        $upload->autoSub  = true;                           // 自动子目录保存文件
        $upload->subName  = array('date','Ymd');
        $upload->saveName = array('uniqid',mt_rand());      // 设置上传文件名

        $info = $upload->uploadOne($_FILES['receipt_img']);
        // return $info;
        if(!$info){
            //上传失败
            return array('receipt_img'=>'none');
        }else{
            return array('receipt_img'=>$info['savepath'] . $info['savename']);
        }

    }

    //删除购物小票
    //liao ya di
    private function del_shopping_rec($order_id){

        if(empty($order_id)){
            return false;
        }

        $where = array('order_id'=>$order_id);

        vendor('Hprose.HproseHttpClient');
        $pie = new \HproseHttpClient(C('RAPIURL').'/Piecemeal');
        $path = $pie->get_receipt_img($where);
        
        if(!$path||$path['receipt_img']=='none'){
            return false;
        }

        unlink(WU_ABS_FILE . $path['receipt_img']);
        return $path['id'];

    }


    //获取线路首重价格与续重价格
    //liao ya di
    public function getLinePriceAjax(){

        echo '';
        die;

        if(empty($_POST['line_id'])){
            echo json_encode(array(
                'status' => false,
                'data' => null,
            ));
            die;
        }

        $line_id = I('post.line_id');
        vendor('Hprose.HproseHttpClient');
        $pie = new \HproseHttpClient(C('RAPIURL').'/Piecemeal');
        $res = $pie->getLineInfo($line_id);

        $info = array();
        if(!$res){
            $info = array(
                'status' => false,
                'data' => null,
            );
        }else{
            $info = array(
                'status' => true,
                'data' => array(
                    'line_id' => $line_id,
                    'weight_first' => $res['weight_first'],
                    'fee_first' => $res['fee_first'],
                    'weight_next' => $res['weight_next'],
                    'fee_next' => round($res['fee_next']/$res['weight_next'],2),
                ),
            );
        }
        echo json_encode($info);
        die;

    }


    //批量打印的订单信息
    public function batch_print(){

        $ids = trim(I('get.ids'));
        $user_id = session('user_id');
        if(empty($ids) || empty($user_id)){
            echo \json_encode(array('status'=>false, 'data'=>array()));
            die;
        }

        $res = $this->Wclient->get_batch_print_info($user_id, $ids);

        echo \json_encode(array('status'=>true, 'data'=>$res));
        die;

    }

    //设置打印凭证状态为 true
    public function set_print(){

        vendor('Hprose.HproseHttpClient');
        $pie = new \HproseHttpClient(C('RAPIURL').'/Piecemeal');
        $res = $pie->set_print(session('user_id'), trim(I('get.id')));

        // dump($res);
        echo (int)$res;
        die;

    }

    // 获取所有线路的分类并格式化后存储到redis
    public function set_category_cache(){

        dump(\Lib11\Queue\CateCache::set_category_cache());
        die;

    }

    // 智能地址分析
    public function address_analysis(){

        $str = I("get.addr");
        if(empty($str)){
            echo json_encode(array(
                'success' => false,
                'info' => '',
            ));
        }

        $addrobj = new \Lib11\addr_analysis\addr_analysis();

        $res = $addrobj->exec($str);

        // dump($res);

        echo \json_encode($res);

    }

    // redis 缓存收件人地区
    public function addr_cache(){
        $line_id = I('get.line_id');
        dump(\Lib11\Queue\CateCache::set_addr_cache($line_id));
        die;

    }

    // 从redis里取得收件人
    public function get_addr_cache(){

        $line_id = I('get.line_id');
        if(empty($line_id)){
            return array();
        }

        // 从redis里取出货品声明里的选项信息
        $addr_list = array();
        $Host = C('Redis')['Host'];
        $Port = C('Redis')['Port'];
        $Auth = C('Redis')['Auth'];

        try{
            $redis = new \Redis();
            $redis->connect($Host,$Port,$overtime);
            $redis->auth($Auth);

            $addr_list = unserialize($redis->get('address_list_' . $line_id));
        }catch(\RedisException $e){
            
        }

        // $this->assign('addr_list', json_encode($addr_list));
        // dump($addr_list);
        echo json_encode($addr_list);
        die;

    }








    /**
     * 保存修改
     * @return [type] [description]
     */
    public function saveEdit(){

        //用于判断是否为提交表单前进行表单验证而已，假如没有type传入，则表示是数据更新，否则只是单独验证数据，不进行数据更新
        // $type = (I('get.type')) ? trim(I('get.type')) : '';
        //用于判断是否经由step_two发起的修改请求，是有别于正常途径的修改的
        $step = (I('get.step')) ? trim(I('get.step')) : '';

        if(IS_POST){
            $tranline = $this->tranline;
            $tranline = array_column($tranline, NULL, 'id');    //二维数组以id字段做一维数组的键名

            $id      = trim(I('post.id'));
            $arr     = I('post.');                 
            $user_id = session('mkuser.uid');                   //获取当前登陆的用户id
            

            $chelist = array(
                'PostName'     => L('PostNameMsg'),//寄件人姓名
                // 'PostAddress'  => L('PostAddressMsg'),//寄件人详细地址
                // 'PostCountry'  => L('PostCountryMsg'),//寄件人 国家 暂时默认 USA
                'PostState'    => L('PostStateMsg'),//寄件人 州
                'PostCity'     => L('PostCityMsg'),//寄件人城 市
                'PostStreet'   => L('PostStreetMsg'),//寄件人 街道
                'PostPhone'    => L('PostPhoneMsg'),//寄件人电话
                'PostCode'     => L('PostCodeMsg'),//寄件人邮编
                'RecName'      => L('RecNameMsg'),//收件人姓名
                'Province'     => L('ProvinceMsg'),//收件人 省
                'City'         => L('CityMsg'),//收件人 市
                'Town'         => L('TownMsg'),//收件人 区
                'RecAddress'   => L('RecAddressMsg'),//收件人详细地址
                'RecPhone'     => L('RecPhoneMsg'),//收件人电话
                'RecCode'      => L('RecCodeMsg'),//收件人邮编
                'TransferLine' => L('TransferLineMsg'),//中转线路
                'Id_tpye'      => L('Id_tpyeMsg'),//证件类型
            );

            if(strlen($arr['PostCity'])>=50){
                echo json_encode(array('msg'=>L('IdNoMsg'),'state'=>'no'));
                exit;
            }
            $arr['PostCity'] = (string)$arr['PostCity'];


            //身份证是否必填
            $ID_card_is_empty = $this->Wclient->get_tranline();
            $list0 = array();
            foreach($ID_card_is_empty as $k=>$v){
                $list0[$v['id']] = $v['input_idno'];
            }
            $ID_card_is_empty = $list0;
            if($ID_card_is_empty[$arr['TransferLine']]==1 && empty($arr['IdNo'])){
                echo json_encode(array('msg'=>L('IdNoMsg'),'state'=>'no'));exit;
            }

            //检查字段是否为空
            foreach($chelist as $k=>$dis){
                if(empty($arr[$k])){
                    echo json_encode(array('state'=>'no','msg'=>$chelist[$k]));
                    exit;
                }
            }

            //验证身份证格式
            if(!empty($arr['IdNo'])){
                if(!certificate(trim(I('post.IdNo')))){
                    $result = array('msg'=>L('id_not_correct'),'state'=>'no');
                    echo json_encode($result);exit;
                }
            }

            //是否需要保存上传的证件照，默认否
            $need_upload = false;

            //初始化为空
            $arr['front_id_img']    = '';
            $arr['back_id_img']     = '';
            $arr['front_file_name'] = '';
            $arr['back_file_name']  = '';
            $arr['small_front_img'] = '';
            $arr['small_back_img'] = '';


            //不填写身份证号码，无法上传身份证图片
            if(empty($arr['IdNo']) && $arr['pic_radio'] == '0'){
                echo json_encode(array('msg'=>L('l_not_id_img'),'state'=>'no'));exit;
            }

            
            //当线路的 member_sfpic_state = 1，检查是否已经上传图片
            if($tranline[$arr['TransferLine']]['member_sfpic_state'] == 1){

                // 先保存购物小票图片上传的信息，因为执行TP的上传时会将$_FILE清空
                $receipt_img = $_FILES['receipt_img'];
                unset($_FILES['receipt_img']);

                $file_one = (isset($_FILES['file_one']['name'])) ? $_FILES['file_one']['name'] : '';
                $file_two = (isset($_FILES['file_two']['name'])) ? $_FILES['file_two']['name'] : '';


                if($file_one != '' || $file_two != ''){

                    $plist = $_FILES;
                    
                    foreach($plist as $ki=>$item){

                        //如果有图片上传
                        if(intval($item['size']) > 0){

                            // 大小必须小于4M
                            if(intval($item['size']) > 4200000){
                                echo json_encode(array('state'=>'no', 'msg'=>L('The_s_4_rc')));
                                exit;
                            }

                            // 判断文件类型
                            $type = explode("/",$item['type']);     
                            if(!in_array($type['1'],array('jpg','png','jpeg'))){
                                echo json_encode(array('state'=>'no', 'msg'=>L('Documents_m_rc')));
                                exit;
                            }

                            // 上传证件照
                            $upload           = new \Think\Upload();            // 实例化上传类
                            $upload->maxSize  = 4200000;                        // 设置附件上传大小  不超过800k 上面设置了大小限制，这里不需要
                            $upload->exts     = array('jpg', 'png', 'jpeg');    // 设置附件上传类型
                            $upload->rootPath = WU_ABS_FILE."/";                // 设置文件上传保存的根路径
                            $upload->savePath = C('UPLOADS_ID_IMG');            // 设置文件上传的保存路径（相对于根路径）
                            $upload->autoSub  = true;                           // 自动子目录保存文件
                            $upload->subName  = array('date','Ymd');
                            $upload->saveName = array('uniqid',mt_rand());      // 设置上传文件名
                            $info[$ki] = $upload->uploadOne($item);

                            // 分析是否上传成功，不成功要退出，重新上传
                            if(!$info[$ki]){
                                echo json_encode(array('state'=>'no', 'msg'=>L('Upload_file_rc')));
                                exit;
                            }
                        }
                    }

                    // 上传成功
                    $image = new \Think\Image();
                    
                    if(!empty($info['file_one'])){
                        $arr['front_id_img'] = $info['file_one']['savepath'].$info['file_one']['savename'];
                        $arr['front_file_name'] = $info['file_one']['name'];

                        //生成缩略图
                        $small_url = WU_ABS_FILE . $info['file_one']['savepath'] . 'small_' . $info['file_one']['savename'];
                        $image->open( WU_ABS_FILE . $info['file_one']['savepath'] . $info['file_one']['savename'] );
                        $image->thumb(150,90,6)->save($small_url);
                        $arr['small_front_img'] = $info['file_one']['savepath'] . 'small_' . $info['file_one']['savename'];

                    }else{
                        $arr['front_id_img'] = '';
                        $arr['front_file_name'] = '';
                        $arr['small_front_img'] = '';
                    }
                    if(!empty($info['file_two'])){
                        $arr['back_id_img'] = $info['file_two']['savepath'].$info['file_two']['savename'];
                        $arr['back_file_name'] = $info['file_two']['name'];

                        //生成缩略图
                        $small_url = WU_ABS_FILE . $info['file_two']['savepath'] . 'small_' . $info['file_two']['savename'];
                        $image->open( WU_ABS_FILE . $info['file_two']['savepath'] . $info['file_two']['savename'] );
                        $image->thumb(150,90,6)->save($small_url);
                        $arr['small_back_img'] = $info['file_two']['savepath'] . 'small_' . $info['file_two']['savename'];

                    }else{
                        $arr['back_id_img'] = '';
                        $arr['back_file_name'] = '';
                        $arr['small_back_img'] = '';
                    }
                   

                    $need_upload = true;//用于判断 是否需要保存上传的证件照

                }

                $_FILES['receipt_img'] = $receipt_img;
            }

            


            // 商品列表 把用户填写的商品整理到数组中
            $pro_list = array();

            // 订单商品总数量
            $num      = 0;

            $arrs    = array_keys($arr);
            $arrc    = implode(',',$arrs);
            $arcount = substr_count($arrc,'brand_');

            // 最多只能有MAX_ORDERNO条货品
            if($arcount > MAX_ORDERNO){
                echo json_encode(array('msg'=>str_replace('{**}', MAX_ORDERNO, L('almost_in_ten')),'state'=>'no'));
                exit;
            }

            for($i=0;$i<=$arcount;$i++){

                if(I('post.brand_'.$i) != '' && !empty(I('post.detail_'.$i)) && I('post.catname_'.$i) != '' && I('post.price_'.$i) != '' && I('post.amount_'.$i) != '' && I('post.coin_'.$i) != ''){
                    $pro_list[$i]['oid']          = I('post.oid_'.$i);
                    $pro_list[$i]['brand']        = trim(I('post.brand_'.$i));
                    $pro_list[$i]['detail']       = trim(I('post.detail_'.$i));
                    $pro_list[$i]['catname']      = trim(I('post.catname_'.$i));
                    $pro_list[$i]['price']        = trim(I('post.price_'.$i));
                    $pro_list[$i]['number']       = trim(I('post.amount_'.$i));
                    $pro_list[$i]['coin']         = trim(I('post.coin_'.$i));
                    $pro_list[$i]['unit']         = trim(I('post.unit_'.$i));
                    $pro_list[$i]['source_area']  = trim(I('post.source_area_'.$i));
                    $pro_list[$i]['remark']       = trim(I('post.remark_'.$i));
                    $pro_list[$i]['category_one'] = trim(I('post.category_one_'.$i));   //一级类别ID
                    $pro_list[$i]['category_two'] = trim(I('post.category_two_'.$i));   //二级类别ID
                    $pro_list[$i]['product_id']   = trim(I('post.product_type_'.$i));   //货品类别ID
                    $pro_list[$i]['spec_unit']       = trim(I('post.spec_unit_'.$i));
                    $pro_list[$i]['num_unit']       = trim(I('post.num_unit_'.$i));
                    $num += intval(trim(I('post.amount_'.$i)));                         //累计商品总数
                }

            }

            if(empty($pro_list)){
                $result = array('msg'=>'至少填写一行数据','no'=>$kk+1,'state'=>'no');
                echo json_encode($result);exit;
            }


            if($tranline[$arr['TransferLine']]['bc_state'] == 1){       //当选择的线路的bc_state=1的时候，需要检查 一级、二级类别、货品类别是否已经选择
                
                foreach($pro_list as $kk=>$po){
                    if($po['category_one'] == ''){
                        echo json_encode(array('msg'=>L('category_one'),'state'=>'no'));
                        exit;
                    }

                    if($po['category_two'] == ''){
                        echo json_encode(array('msg'=>L('category_two'),'state'=>'no'));
                        exit;
                    }

                    if($po['product_id'] == ''){
                        echo json_encode(array('msg'=>L('product_type'),'state'=>'no'));
                        exit;
                    }
                }
            
            }else if($tranline[$arr['TransferLine']]['cc_state'] == 1){     //当选择的线路的cc_state=1的时候，需要检查 一级、二级类别是否已经选择

                foreach($pro_list as $kk=>$po){
                    if($po['category_one'] == ''){
                        echo json_encode(array('msg'=>L('category_one'),'state'=>'no'));
                        exit;
                    }

                    if($po['category_two'] == ''){
                        echo json_encode(array('msg'=>L('category_two'),'state'=>'no'));
                        exit;
                    }

                    // 两个单位也必须验证
                    if($po['spec_unit'] == '' || $po['num_unit'] == ''){
                        echo json_encode(array('msg'=>'单位不能为空','no'=>$kk+1,'state'=>'no'));
                        exit;
                    }
                }
            }
            
            foreach($pro_list as $k=>$v){           //验证价格和数量
                if(empty($v['price'])){
                    echo json_encode(array(
                        'msg'=>'[' . L('l__price') . '] ' . L('l_empty'),
                        'state'=>'no',
                    ));
                    die;
                }
                if(!is_numeric($v['price'])){
                    echo json_encode(array(
                        'msg'=>'[' . L('l__price') . '] ' . L('l_mb_num'),
                        'state'=>'no',
                    ));
                    die;
                }
                if($v['price']<=0){
                    echo json_encode(array(
                        'msg'=>'[' . L('l__price') . '] ' . L('l_eq_o'),
                        'state'=>'no',
                    ));
                    die;
                }
                if(empty($v['number'])){
                    echo json_encode(array(
                        'msg'=>'[' . L('l__number') . '] ' . L('l_empty'),
                        'state'=>'no',
                    ));
                    die;
                }
                if(!is_numeric($v['number'])){
                    echo json_encode(array(
                        'msg'=>'[' . L('l__number') . '] ' . L('l_mb_num'),
                        'state'=>'no',
                    ));
                    die;
                }
                if($v['number']<=0){
                    echo json_encode(array(
                        'msg'=>'[' . L('l__number') . '] ' . L('l_eq_o'),
                        'state'=>'no',
                    ));
                    die;
                }

                if(empty($v['detail'])){
                    $result = array('msg'=>'货品名称不能为空','no'=>$kk+1,'state'=>'no');
                    echo json_encode($result);exit;
                }

                //品牌必须为英文或者符号
                // if(!empty($v['brand']) && !preg_match('/^[\w\/\\\ \^\%\(\)\*\+\'\:\.\?\[\]{}]+$/',$v['brand'])){
                //     echo json_encode(array(
                //         'msg' => '[' . L('l__brand') . '] ' . L('l_brand_eng'),
                //         'state' => 'no',
                //     ));
                //     die;
                // }

                //货品名称必须为中文
                //货品名称必须包含中文
                // if(!empty($v['detail']) && !preg_match('/^[\x{4e00}-\x{9fa5}]+$/u',$v['detail'])){
                // if(!empty($v['detail']) && !preg_match('/[\x{4e00}-\x{9fa5}]+/u',$v['detail'])){
                //     echo json_encode(array(
                //         'msg'=>'[' . L('l__detail') . '] ' . L('l_rec_chi'),
                //         'state'=>'no',
                //     ));
                //     die;
                // }
            }



            // liao ya di
            // 2017-10-20
            // 验证价格 start
            $l_line_id = $arr['TransferLine'];
            $l_price_arr = array();
            foreach($pro_list as $lk=>$lv){
                $l_price_arr[$lk]['price'] = $lv['price'];                  // 单价
                $l_price_arr[$lk]['count'] = $lv['number'];                 // 数量
                $l_price_arr[$lk]['rate_cat_id'] = $lv['category_two'];     // 可以查找税金的分类id
            }
            $l_res = $this->check_price($l_line_id,$l_price_arr);
            // echo \json_encode($l_res);die;
            if(!$l_res['success']){
                $resinfo = explode(',',$l_res['info']);
                $errinfo = L($resinfo[0]);
                $eee = str_replace('{xxx}',$resinfo[1],$errinfo);
                echo json_encode(array('msg'=>$eee,'state'=>'no'));
                die;
            }
            //end


            $pro_list = array_values($pro_list);        // 数组的键值重新排序
            $count    = count($pro_list);               // 计算此数组的总数

            $goodsPrice = 0;        // 商品总价
            $goodsNum   = 0;        // 商品总数量
            foreach($pro_list as $k=>$vo){
                $goodsPrice += (intval($vo['number']) * floatval($vo['price']));
                $goodsNum += intval($vo['number']);
            }

            $arr['price']  = sprintf("%.2f", $goodsPrice);
            $arr['number'] = $goodsNum;
        
            if($count < 1){
                echo json_encode(array('state'=>'no','msg'=>L('GoodsListMsg')));
                exit;
            }

            $Wclient = $this->Wclient;

            //修改购物小票
            //liao ya di
            if(!empty($_FILES['receipt_img'])&&$_FILES['receipt_img']['error']==0){
                $test = $this->del_shopping_rec($id);
                $sr_data = $this->shopping_receipt();
            }else{
                $sr_data = array();
            }
            // die;


            $res = $Wclient->_saveEdit($user_id,$id,$num,$arr,$pro_list, $need_upload,$sr_data);
            // echo json_encode($res);
            // die;


            if($res['state'] == 'yes'){
                //如果是从step_two页面发起 修改 请求的，则需要保存数据然后jq控制跳转回到step_two页面
                if($step != ''){

                    $uucode = authcode($res['uucode'], 'ENCODE', C('private_key'), 0);//加密
                    $sn     = authcode($res['sn'], 'ENCODE', C('private_key'), 0);//加密
                    $cid    = authcode($res['cid'], 'ENCODE', C('private_key'), 0);//加密
                    
                    $backArr = array('state'=>'yes','msg'=>L('save_success'),'url'=>U('Order/step_two',array('uucode'=>base64_encode($uucode),'sn'=>base64_encode($sn),'lid'=>base64_encode($cid))));
                }else{
                    $backArr = array('state'=>'yes','msg'=>L('save_success'),'url'=>U('Member/index'));
                }
            }else{
                $backArr = array('state'=>'no','msg'=>L('save_failed'));
            }

            echo json_encode($backArr);
            exit;
        }
        
    }




    /**
     * 表单提交之前后台验证数据
     * @return [type] [description]
     */
    public function checkForm(){

        if(IS_POST){


            session('pro_list',null);

            $tranline = $this->tranline;
            $tranline = array_column($tranline, NULL, 'id');

            $arr = I('post.');

            // 是否需要添加到消息队列
            $neer_set_catch = false;


            $chelist = array(
                'PostName'     => L('PostNameMsg'),             // 寄件人姓名
                // 'PostAddress'  => L('PostAddressMsg'),       // 寄件人详细地址
                // 'PostCountry'  => L('PostCountryMsg'),       // 寄件人 国家 暂时默认 USA
                'PostState'    => L('PostStateMsg'),            // 寄件人 州
                'PostCity'     => L('PostCityMsg'),             // 寄件人城 市
                'PostStreet'   => L('PostStreetMsg'),           // 寄件人 街道
                'PostPhone'    => L('PostPhoneMsg'),            // 寄件人电话
                'PostCode'     => L('PostCodeMsg'),             // 寄件人邮编
                'RecName'      => L('RecNameMsg'),              // 收件人姓名
                'Province'     => L('ProvinceMsg'),             // 收件人 省
                'City'         => L('CityMsg'),                 // 收件人 市
                'Town'         => L('TownMsg'),                 // 收件人 区
                'RecAddress'   => L('RecAddressMsg'),           // 收件人详细地址
                'RecPhone'     => L('RecPhoneMsg'),             // 收件人电话
                'RecCode'      => L('RecCodeMsg'),           // 收件人邮编
                'TransferLine' => L('TransferLineMsg'),         // 中转线路
                'Id_tpye'      => L('Id_tpyeMsg'),              // 证件类型
            );



            // 身份证是否必填
            $ID_card_is_empty = $this->Wclient->get_tranline();
            $list0 = array();
            foreach($ID_card_is_empty as $k=>$v){
                $list0[$v['id']] = $v['input_idno'];
            }
            $ID_card_is_empty = $list0;
            if($ID_card_is_empty[$arr['TransferLine']]==1 && empty($arr['IdNo'])){
                echo json_encode(array('msg'=>L('IdNoMsg'),'state'=>'no'));
                exit;
            }

            // 如果选择寄件人上传，就必须填写身份证号码，无论该线路是否需要上传身份证
            if($arr['pic_radio'] == '0' && empty($arr['IdNo'])){
                echo json_encode(array('msg'=>L('IdNoMsg'),'state'=>'no'));
                exit;
            }

            // 验证字段是否为空
            foreach($chelist as $k=>$dis){
                if(trim($arr[$k]) == ''){
                    echo json_encode(array('msg'=>$chelist[$k],'state'=>'no'));
                    exit;
                }
            }

            //验证身份证格式
            if(!empty($arr['IdNo'])){
                if(!certificate(trim(I('post.IdNo')))){
                    echo json_encode(array('msg'=>L('id_not_correct'),'state'=>'no'));
                    exit;
                }
            }


            // 是否需要保存上传的证件照，默认否
            $need_upload = false;

            // 初始化为空
            $arr['front_id_img']    = '';
            $arr['back_id_img']     = '';
            $arr['front_file_name'] = '';
            $arr['back_file_name']  = '';
            $arr['small_front_img'] = '';
            $arr['small_back_img'] = '';

            // 查看收件人身份证照片
            $addr_id = I('post.addr_id');
            $x_client = new \HproseHttpClient(C('RAPIURL').'/UserAddressee');
            $x_result = $x_client->search(array('id'=>$addr_id),'');
            $x_result = $x_result['data'][0];
            $x_rece_id_img = false;
            if(!empty($x_result)){
                if($x_result['id_card_front']!='none' || $x_result['id_card_back']!='none'){
                    $x_rece_id_img = true;
                }
            }
            

                // 开始上传图片
                $receipt_img = $_FILES['receipt_img'];
                unset($_FILES['receipt_img']);

                // 不填写身份证号码，无法上传身份证图片
                if(empty($arr['IdNo']) && $arr['pic_radio'] == '0'){
                    echo json_encode(array('msg'=>L('l_not_id_img'),'state'=>'no'));
                    exit;
                }

                // 查找身份证历史记录，是否有身份证图片
                $pie = new \HproseHttpClient(C('RAPIURL').'/Piecemeal');
                $check_id_img = $pie->check_idno(session('user_id'), $arr['IdNo'], $arr['RecName']);

                // 当线路的 member_sfpic_state = 1，检查是否已经上传图片
                if($tranline[$arr['TransferLine']]['member_sfpic_state'] == 1){

                    if($arr['pic_radio'] == '0'){

                        //寄件人上传

                        $plist = $_FILES;


                        //如果此身份证号没有历史的身份证图片，则需要验证身份证图片是否上传
                        if(!$check_id_img){

                            //需要上传，但是一张也没有上传，且没有收件人身份证图片，则报错
                            if(!$x_rece_id_img && empty($plist['file_one']) && empty($plist['file_two'])){
                                if(empty($plist['file_one'])){
                                    echo json_encode(array('state'=>'no', 'msg'=>L('IdImg_front')));
                                    die;
                                }
                                if(empty($plist['file_two'])){
                                    echo json_encode(array('state'=>'no', 'msg'=>L('IdImg_back')));
                                    die;
                                }
                            }
                            //需要上传，但是一张也没有上传，且没有收件人身份证图片，则报错
                            if(!$x_rece_id_img && $plist['file_one']['error'] != 0 && $plist['file_two']['error'] != 0){
                                if($plist['file_one']['error'] != 0){
                                    echo json_encode(array('state'=>'no', 'msg'=>L('IdImg_front')));
                                    die;
                                }
                                if($plist['file_two']['error'] != 0){
                                    echo json_encode(array('state'=>'no', 'msg'=>L('IdImg_back')));
                                    die;
                                }
                            }

                        }
                        
                        
                        foreach($plist as $ki=>$item){

                            if(intval($item['size']) > 0){

                                // 判断文件大小
                                if(intval($item['size']) > 4200000){    
                                    $result = array('state'=>'no', 'msg'=>L('The_s_4_rc'));
                                    echo json_encode($result);exit;
                                }

                                // 判断文件类型
                                $type = explode("/",$item['type']);     
                                if(!in_array($type['1'],array('jpg','png','jpeg'))){
                                    $result = array('state'=>'no', 'msg'=>L('Documents_m_rc'));
                                    echo json_encode($result);
                                    exit;
                                }

                                // 上传证件照
                                $upload           = new \Think\Upload();            // 实例化上传类
                                $upload->maxSize  = 4200000;                        // 设置附件上传大小  不超过800k 上面设置了大小限制，这里不需要
                                $upload->exts     = array('jpg', 'png', 'jpeg');    // 设置附件上传类型
                                $upload->rootPath = WU_ABS_FILE."/";                // 设置文件上传保存的根路径
                                $upload->savePath = C('UPLOADS_ID_IMG');            // 设置文件上传的保存路径（相对于根路径）
                                $upload->autoSub  = true;                           // 自动子目录保存文件
                                $upload->subName  = array('date','Ymd');
                                $upload->saveName = array('uniqid',mt_rand());      // 设置上传文件名
                                $info[$ki] = $upload->uploadOne($item);

                                // 是否上传成功
                                if(!$info[$ki]){
                                    $result = array('state'=>'no', 'msg'=>L('Upload_file_rc'));
                                    echo json_encode($result);exit;
                                }
                            }
                        }

                        // 上传成功  
                        $image = new \Think\Image();
                        foreach($info as $key=>$v){

                            //生成缩略图
                            $small_url = WU_ABS_FILE . $v['savepath'] . 'small_' . $v['savename'];
                            $image->open( WU_ABS_FILE . $v['savepath'] . $v['savename'] );
                            $image->thumb(150,90,6)->save($small_url);

                            if($key == 'file_one'){
                                $arr['front_id_img'] = $v['savepath'].$v['savename'];
                                $arr['front_file_name'] = $v['name'];
                                $arr['small_front_img'] = $v['savepath'] . 'small_' . $v['savename'];

                                session('mkuser.ID_front_img',$v['name']);  // 证件照上传成功,则把图片名字保存到session
                            }else{
                                $arr['back_id_img'] = $v['savepath'].$v['savename'];
                                $arr['back_file_name'] = $v['name'];
                                $arr['small_back_img'] = $v['savepath'] . 'small_' . $v['savename'];

                                session('mkuser.ID_back_img',$v['name']);   // 证件照上传成功,则把图片名字保存到session
                            }
                        }

                        // 上传完成
                        $arr['id_img_status'] = '100';

                        // 需要保存上传的证件照
                        $need_upload = true;

                    }else{

                        if($check_id_img && !empty($arr['IdNo'])){
                            // 存在身份证历史记录图片,且身份证号码不为空
                            $arr['id_img_status'] = '100';
                            unset($arr['pic_radio']);
                        }else{
                            // 需要上传而未上传，给收件人上传
                            $arr['pic_radio'] = 1;
                            $arr['id_img_status'] = '0';

                            // 选择客人上传时，要发送短信
                            $neer_set_catch = true;
                        }

                    }

                }else{

                    //无需上传
                    unset($arr['pic_radio']);
                    $arr['id_img_status'] = '100';

                }

                //上传完成，恢复$_FILES
                $_FILES['receipt_img'] = $receipt_img;
            

            
                


            // liao ya di 
            // 2017-10-18
            // start

            // 没有上传图片，如果有收件人且收件人有身份证图片，则使用收件人的身份证图片
            // 必须有填写身份证号码才能上传
            if(!empty($arr['IdNo'])&&count($_FILES)!=2&&!empty($addr_id)&&$addr_id!=0){

                if(empty($info['file_one'])&&$x_result['id_card_front']!='none'){

                    // 复制新文件，否则收件人删除以后，订单的图片也没了
                    $addr_arr = explode('/',$x_result['id_card_front']);
                    $addr_v['savepath'] = '/' . $addr_arr[1] . '/' . $addr_arr[2] . '/';
                    $addr_v['savename'] = uniqid(mt_rand()) . strrchr($addr_arr[3],'.');
                    $addr_url = $addr_v['savepath'] . $addr_v['savename'];
                    copy(WU_ABS_FILE.$x_result['id_card_front'],WU_ABS_FILE.$addr_url);
                    $x_result['id_card_front'] = $addr_url;

                    $arr['front_id_img'] = $x_result['id_card_front'];

                    $arr['front_file_name'] = substr($x_result['id_card_front'],-26);
                    session('mkuser.ID_front_img',$arr['front_file_name']);
                }

                if(empty($info['file_two'])&&$x_result['id_card_back']!='none'){

                    // 复制新文件，否则收件人删除以后，订单的图片也没了
                    $addr_arr = explode('/',$x_result['id_card_back']);
                    $addr_v['savepath'] = '/' . $addr_arr[1] . '/' . $addr_arr[2] . '/';
                    $addr_v['savename'] = uniqid(mt_rand()) . strrchr($addr_arr[3],'.');
                    $addr_url = $addr_v['savepath'] . $addr_v['savename'];
                    copy(WU_ABS_FILE.$x_result['id_card_back'],WU_ABS_FILE.$addr_url);
                    $x_result['id_card_back'] = $addr_url;

                    $arr['back_id_img'] = $x_result['id_card_back'];

                    $arr['back_file_name'] = substr($x_result['id_card_back'],-26);
                    session('mkuser.ID_back_img',$arr['back_file_name']);
                }

            }

            // liao ya di
            // 2017-10-18
            // end



            // /* 验证规则 2015-10-30 Jie */
            // $len = strlen(trim(I('post.Province'))) + strlen(trim(I('post.City'))) + strlen(trim(I('post.Town')));
            // if(strlen(trim(I('post.RecAddress'))) <= $len){
            //     $result = array('msg'=>L('RecAddressMsg'),'state'=>'no');
            //     $this->ajaxReturn($result);
            // }


            // 商品列表 把用户填写的商品整理到数组中
            $pro_list = array();
            $num      = 0;

            $arrs    = array_keys($arr);
            $arrc    = implode(',',$arrs);
            $arcount = substr_count($arrc,'brand_');

            // 最多只能有MAX_ORDERNO条货品
            if($arcount>MAX_ORDERNO){
                echo json_encode(array('msg'=>str_replace('{**}', MAX_ORDERNO, L('almost_in_ten')),'state'=>'no'));
                exit;
            }
             for($i=0;$i<$arcount;$i++){
//            for($i=0; $i<=MAX_ORDERNO ;$i++){

                if(I('post.brand_'.$i) != '' && I('post.detail_'.$i) != '' && I('post.catname_'.$i) != '' && I('post.price_'.$i) != '' && I('post.amount_'.$i) != '' && I('post.coin_'.$i) != ''){
                    $pro_list[$i]['oid']          = I('post.oid_'.$i);
                    $pro_list[$i]['brand']        = trim(I('post.brand_'.$i));
                    $pro_list[$i]['detail']       = trim(I('post.detail_'.$i));
                    $pro_list[$i]['catname']      = trim(I('post.catname_'.$i));
                    $pro_list[$i]['price']        = trim(I('post.price_'.$i));
                    $pro_list[$i]['number']       = trim(I('post.amount_'.$i));
                    $pro_list[$i]['coin']         = trim(I('post.coin_'.$i));
                    $pro_list[$i]['unit']         = trim(I('post.unit_'.$i));
                    $pro_list[$i]['source_area']  = trim(I('post.source_area_'.$i));
                    $pro_list[$i]['remark']       = trim(I('post.remark_'.$i));
                    $pro_list[$i]['category_one'] = trim(I('post.category_one_'.$i)); // 一级类别ID
                    $pro_list[$i]['category_two'] = trim(I('post.category_two_'.$i)); // 二级类别ID
                    $pro_list[$i]['product_id']   = trim(I('post.product_type_'.$i)); // 货品类别ID
                    $pro_list[$i]['spec_unit']       = trim(I('post.spec_unit_'.$i));
                    $pro_list[$i]['num_unit']       = trim(I('post.num_unit_'.$i));
                    $num += intval(trim(I('post.amount_'.$i)));
                }
            }


// file_put_contents(dirname(__FILE__) . '/../../Runtime/Logs/WebUser/log2018.log', var_export($pro_list,true), FILE_APPEND);

            if(empty($pro_list)){
                $result = array('msg'=>'至少填写一行数据','no'=>$kk+1,'state'=>'no');
                echo json_encode($result);exit;
            }

            if($tranline[$arr['TransferLine']]['bc_state'] == 1){           // 当选择的线路的bc_state=1的时候，需要检查 一级、二级类别、货品类别是否已经选择

                foreach($pro_list as $kk=>$po){
                    if($po['category_one'] == ''){
                        echo json_encode(array('msg'=>L('category_one'),'no'=>$kk+1,'state'=>'no'));
                        exit;
                    }

                    if($po['category_two'] == ''){
                        echo json_encode(array('msg'=>L('category_two'),'no'=>$kk+1,'state'=>'no'));
                        exit;
                    }

                    if($po['product_id'] == ''){
                        echo json_encode(array('msg'=>L('product_type'),'no'=>$kk+1,'state'=>'no'));
                        exit;
                    }
                }
            
            }else if($tranline[$arr['TransferLine']]['cc_state'] == 1){     // 当选择的线路的cc_state=1的时候，需要检查 一级、二级类别是否已经选择
                
                foreach($pro_list as $kk=>$po){
                    if($po['category_one'] == ''){
                        echo json_encode(array('msg'=>L('category_one'),'no'=>$kk+1,'state'=>'no'));
                        exit;
                    }

                    if($po['category_two'] == ''){
                        echo json_encode(array('msg'=>L('category_two'),'no'=>$kk+1,'state'=>'no'));
                        exit;
                    }

                    // 两个单位也必须验证
                    if($po['spec_unit'] == '' || $po['num_unit'] == ''){
                        echo json_encode(array('msg'=>'单位不能为空','no'=>$kk+1,'state'=>'no'));
                        exit;
                    }
                }

            }


            // 验证价格和数量
            // liao ya di
            foreach($pro_list as $k=>$v){
                if(!empty($v['catname']) && strlen((string)$v['catname'])>49){
                    echo json_encode(array(
                        'msg'=>'[' . L('l__catname') . '] ' . L('l_max_len'),
                        'state'=>'no',
                    ));
                    die;
                }
                if(empty($v['price'])){
                    echo json_encode(array(
                        'msg'=>'[' . L('l__price') . '] ' . L('l_empty'),
                        'state'=>'no',
                    ));
                    die;
                }
                if(!is_numeric($v['price'])){
                    echo json_encode(array(
                        'msg'=>'[' . L('l__price') . '] ' . L('l_mb_num'),
                        'state'=>'no',
                    ));
                    die;
                }
                if($v['price']<=0){
                    echo json_encode(array(
                        'msg'=>'[' . L('l__price') . '] ' . L('l_eq_o'),
                        'state'=>'no',
                    ));
                    die;
                }
                if(empty($v['number'])){
                    echo json_encode(array(
                        'msg'=>'[' . L('l__number') . '] ' . L('l_empty'),
                        'state'=>'no',
                    ));
                    die;
                }
                if(!is_numeric($v['number'])){
                    echo json_encode(array(
                        'msg'=>'[' . L('l__number') . '] ' . L('l_mb_num'),
                        'state'=>'no',
                    ));
                    die;
                }
                if($v['number']<=0){
                    echo json_encode(array(
                        'msg'=>'[' . L('l__number') . '] ' . L('l_eq_o'),
                        'state'=>'no',
                    ));
                    die;
                }

                if(empty($v['detail'])){
                    $result = array('msg'=>'货品名称不能为空','no'=>$kk+1,'state'=>'no');
                    echo json_encode($result);exit;
                }

                
                //品牌必须为英文或者符号
                // if(!empty($v['brand']) && !preg_match('/^[\w\/\\\ \^\%\(\)\*\+\'\:\.\?\[\]{}]+$/',$v['brand'])){
                //     echo json_encode(array(
                //         'msg' => '[' . L('l__brand') . '] ' . L('l_brand_eng'),
                //         'state' => 'no',
                //     ));
                //     die;
                // }

                //货品名称必须为中文
                //货品名称必须包含中文
                // if(!empty($v['detail']) && !preg_match('/^[\x{4e00}-\x{9fa5}]+$/u',$v['detail'])){
                // if(!empty($v['detail']) && !preg_match('/[\x{4e00}-\x{9fa5}]+/u',$v['detail'])){
                //     echo json_encode(array(
                //         'msg'=>'[' . L('l__detail') . '] ' . L('l_rec_chi'),
                //         'state'=>'no',
                //     ));
                //     die;
                // }
            }


            // liao ya di
            // 2017-10-20
            // 验证价格 start
            $l_line_id = $arr['TransferLine'];
            $l_price_arr = array();
            foreach($pro_list as $lk=>$lv){
                $l_price_arr[$lk]['price'] = $lv['price'];                  //单价
                $l_price_arr[$lk]['count'] = $lv['number'];                 //数量
                $l_price_arr[$lk]['rate_cat_id'] = $lv['category_two'];     //可以查找税金的分类id
            }
            $l_res = $this->check_price($l_line_id,$l_price_arr);
            // echo \json_encode($l_res);die;
            if(!$l_res['success']){
                $resinfo = explode(',',$l_res['info']);
                $errinfo = L($resinfo[0]);
                $eee = str_replace('{xxx}',$resinfo[1],$errinfo);
                echo json_encode(array('msg'=>$eee,'state'=>'no'));
                die;
            }
            //end

// file_put_contents(dirname(__FILE__) . '/../../Runtime/Logs/WebUser/log2018.log', var_export($pro_list,true), FILE_APPEND);

            $pro_list = array_values($pro_list);    // 数组的键值重新排序



            $count    = count($pro_list);           // 计算此数组的总数
            // 验证货品声明是否至少填写一行
            if($count < 1){
                echo json_encode(array('msg'=>L('GoodsListMsg'),'state'=>'no'));
                exit;
            }

            // 下单的发件人信息添加到session，方便下次再下单的时候，不需要再次填写发件人信息
            // $info = array(
            //     'PostName'    => trim(I('post.PostName')),
            //     'PostAddress' => trim(I('post.PostAddress')),
            //     'PostPhone'   => trim(I('post.PostPhone')),
            //     'PostCode'    => trim(I('post.PostCode')),
            //     'PostCountry' => trim(I('post.PostCountry')),
            //     'PostState'   => trim(I('post.PostState')),
            //     'PostCity'    => trim(I('post.PostCity')),
            //     'PostStreet'  => trim(I('post.PostStreet')),
            // );
            // session('mkuser.info', $info);
            // end

            // 验证通过，则保存订单
            $res = $this->addOrder($num,$arr,$pro_list, $need_upload, $neer_set_catch);

// file_put_contents(dirname(__FILE__) . '/../../Runtime/Logs/WebUser/log2018.log', var_export($pro_list,true), FILE_APPEND);

            if($res['state'] == 'no'){          // 保存失败
                $res['msg'] = L($res['code']);
                echo json_encode($res);
                exit;
            }else{                              // 保存成功

                // 生成收件人数据，添加到收件人列表
                // liao ya di START
                if($_POST['is_save_addr'] == '1'){

                    $addr_data = array(
                        'user_id' => session('mkuser.uid'),
                        'name' => $arr['RecName'],
                        'tel' => $arr['RecPhone'],
                        'province' => $arr['Province'],
                        'city' => $arr['City'],
                        'town' => $arr['Town'],
                        'address' => $arr['RecAddress'],
                        'postal_code' => $arr['RecCode'],
                        'cre_type' => $arr['Id_tpye'],
                        'cre_num' => $arr['IdNo'],
                        'line_id' => $arr['TransferLine'],
                    );
    
                    if(empty($arr['front_id_img'])){
                        $addr_data['id_card_front'] = 'none';
                        $addr_data['id_card_front_small'] = 'none';
                    }else{
                        $addr_data['id_card_front'] = $arr['front_id_img'];
                    }
    
                    if(empty($arr['back_id_img'])){
                        $addr_data['id_card_back'] = 'none';
                        $addr_data['id_card_back_small'] = 'none';
                    }else{
                        $addr_data['id_card_back'] = $arr['back_id_img'];
                    }


                    $this->insert_addr_list($addr_data);

                }

                //生成寄件人数据
                $sender_data = array(
                    's_name' => trim(I('post.PostName')),
                    's_street' => trim(I('post.PostStreet')),
                    's_country' => trim(I('post.PostCountry')),
                    's_state' => trim(I('post.PostState')),
                    's_city' => trim(I('post.PostCity')),
                    's_tel' => trim(I('post.PostPhone')),
                    's_code' => trim(I('post.PostCode')),
                    'user_id' => session("user_id"),
                );
                $this->insert_sender($sender_data);

                // END


                $uucode = authcode($res['uucode'], 'ENCODE', C('private_key'), 0);
                $sn     = authcode($res['sn'], 'ENCODE', C('private_key'), 0);
                $cid    = authcode($res['cid'], 'ENCODE', C('private_key'), 0);
                echo json_encode(array(
                    'state'=>'yes',
                    'url'=>U('Order/step_two',array('uucode'=>base64_encode($uucode),
                                                    'sn'=>base64_encode($sn),
                                                    'lid'=>base64_encode($cid)
                                              ))
                ));
                exit;
            }

        }
    }



    /**
     * 订单保存   checkForm()数据 校验通过 后执行 订单数据 保存
     * @return [type] [description]
     */
    public function addOrder($num,$arr,$pro_list, $need_upload=false, $neer_set_catch=false){

        $user_id   = session('mkuser.uid');         // 获取当前登陆的用户id
        $user_name = session('mkuser.username');    // 获取当前登陆的用户名
        // $uucode  = session('ship');              // 根据session中的ship判断是否已经生成过一个随机码
        $goodsPrice = 0;        // 商品总价
        $goodsNum   = 0;        // 商品总数量
        foreach($pro_list as $k=>$vo){
            $goodsPrice += (intval($vo['number']) * floatval($vo['price']));
            $goodsNum += intval($vo['number']);
        }

        $arr['price']  = sprintf("%.2f", $goodsPrice);
        $arr['number'] = $goodsNum;

        // 上传购物小票图片
        $data = $this->shopping_receipt();

        $Wclient = $this->Wclient;

        $res = $Wclient->_addOrder($user_id,$user_name,$num,$arr,$pro_list,C('Web_Config'),$need_upload,$data);     // 保存订单数据


        if($neer_set_catch && $res['state'] == 'yes'){
            // 设置redis消息队列
            $queue = new \Lib11\Queue\JoinQueue();
            $queue->join_queue($res['catch_content']);
        }

        return $res;
    }


    /**
     * [step_two 订单信息确认页面]
     * @param  [type] $user_id [用户ID]
     * @param  [type] $sn      [内部订单号]
     * @param  [type] $uucode  [凭证号]
     * @return [type]          [description]
     */
    public function step_two(){
        $uucode = base64_decode(trim(I('uucode')));         // 凭证号
        $sn     = base64_decode(trim(I('sn')));             // 内部订单号
        $lid    = base64_decode(trim(I('lid')));            // 订单ID

        $uucode = authcode($uucode, 'DECODE', C('private_key'), 0);
        $sn     = authcode($sn, 'DECODE', C('private_key'), 0);
        $lid    = authcode($lid, 'DECODE', C('private_key'), 0);

        $user_id = session('mkuser.uid');

        $Wclient = $this->Wclient;
        $res = $Wclient->_step_two($user_id,$sn,$uucode);   // 获取订单信息


//        // 如果未填写身份证
//		if(empty($res['info']['idno'])){
//			$res['info']['front_file_name'] = '';
//			$res['info']['back_file_name'] = '';
//			$res['info']['front_id_img'] = '';
//			$res['info']['back_id_img'] = '';
//		}

        // dump($res);

        /* 显示已上传的证件照正反面图片 */
        // 证件照正面文件名不为空
        if($res['info']['front_file_name'] != ''){
//            $this->assign('ID_front_img',$res['info']['front_file_name']);          // 把证件照正面文件名字保存到session
            $this->assign('front_id_img', WU_FILE.$res['info']['front_id_img']);    // 显示证件照正面图片
        }else{
//            $this->assign('ID_front_img','');       // 把证件照正面文件名字从session中移除
            $this->assign('front_id_img', C('TMPL_PARSE_STRING.__MEMBER__').'/images/pho_front.png');   // 显示默认图片
        }
        // 证件照反面文件名不为空
        if($res['info']['back_file_name'] != ''){
//            $this->assign('ID_back_img',$res['info']['back_file_name']);            // 把证件照反面文件名字保存到session
            $this->assign('back_id_img', WU_FILE.$res['info']['back_id_img']);      // 显示证件照反面图片
        }else{
//            $this->assign('ID_back_img','');        // 把证件照反面文件名字从session中移除
            $this->assign('back_id_img', C('TMPL_PARSE_STRING.__MEMBER__').'/images/pho_back.png'); // 显示默认图片
        }
        /* 显示已上传的证件照正反面图片 end */

        // 验证订单，验证不通过则跳转错误，不显示页面
        if($res === false){
            $this->error(L('wrong_operate'),U('Member/index'),3);exit;
        }

        // 加载 线路种类
        $tranline = $this->tranline;

        $alist = array();
        foreach($tranline as $item){
            $alist[$item['id']] = $item['lngname'];
        }
        
        // $goodsPrice = 0;//商品总价
        // $goodsNum   = 0;//商品总数量
        // foreach($res['pro_list'] as $k=>$vo){
        //     $goodsPrice += (intval($vo['number']) * floatval($vo['price']));
        //     $goodsNum += intval($vo['number']);
        // }

        $tranline = array_column($tranline, NULL, 'id');//二维数组中的一维数组的id作为二维数组的键名

        // $goodsPrice = sprintf("%.2f", $goodsPrice);
        $trankd = $res['center']['id'];
        $Web_Config = (isset(C('Web_Config')[$trankd])) ? C('Web_Config')[$trankd] : '';
        $freight  = sprintf("%.2f",floatval($Web_Config['Price']));
        $discount = sprintf("%.2f", floatval($Web_Config['Price']) * floatval($Web_Config['Discount']));
        $charge   = sprintf("%.2f",floatval($Web_Config['Charge']));

        $ID_TYPE = C('ID_TYPE');                // 证件类型

        $cat_list = $Wclient->cat_list();       // 查询所有类别
        $cat_list = array_column($cat_list, NULL, 'id');    // 二维数组中的一维数组的id作为二维数组的键名
        
        if($res['center']['cc_state'] == '1' && $res['center']['tax_kind'] == '1'){
            // 根据汇率计算出美元免税的额度
            $free_duty = sprintf("%.2f", floatval(C('RMB_Free_Duty')) / floatval(C('US_TO_RMB_RATE')));
        }else{
            $free_duty = '';
        }

        // dump($res['pro_list']);

        self::assign('free_duty',$free_duty);
        self::assign('cat_list',$cat_list);                         // 类别列表
        self::assign('TranKd',$res['info']['TranKd']);              // 线路id
        self::assign('count',count($res['pro_list']));              // 货品声明 总数
        self::assign('pro_list',$res['pro_list']);                  // 货品列表
        self::assign('alist',$alist);                               // 中转线路
        self::assign('info',$res['info']);                          // 寄件人，收件人信息
        self::assign('cid',$lid);                                   // 订单ID
        self::assign('sn',urlencode(base64_encode($sn)));           // 内部订单号
        self::assign('uucode',urlencode(base64_encode($uucode)));   // 凭证号
        // self::assign('goodsPrice',$goodsPrice);                  // 商品总价
        // self::assign('goodsNum',$goodsNum);                      // 商品总数量
        self::assign('member_sfpic_state',$res['center']['member_sfpic_state']);
        self::assign('freight',$freight);                           // 运费
        self::assign('discount',$discount);                         // 折扣金额
        self::assign('charge',$charge);                             // 手续费
        self::assign('ID_TYPE',$ID_TYPE);                           // 证件类型
        self::assign('tranline',$tranline);                         // 证件类型
        // dump($res['pro_list']);
        $this->display();
    }


    /**
     * 打印随机码  视图 ok
     * @return [type] [description]
     */
    public function step_three(){
        // if(IS_POST){
            $id = I('cid');
            $cname = I('cname');

            $user_id = session('mkuser.uid');

            $Wclient = $this->Wclient;
            $res = $Wclient->tofinish($user_id,$id);

            // dump($res);

            // Jie 20151120 检查是否存在或是否属于该登陆会员
            if(!$res){
                $this->redirect('Public/404');
            }

            // //生成二维码 Jie 20151126
            // $this->qrcode($res['random_code']);
            self::assign('res',$res);
            // session('ship',NULL);   //清除session
        // }
        $this->display();
    }

    /**
     * 条形码生成 方法
     * @return [type] [description]
     */
    public function barcode(){
        $barcode = new \Libm\barcode\barcodeApi();
        $barcode->text = trim(I('text'));
        echo $barcode->png();
    }
    
    /**
     * 二维码生成 方法  前端页面请求数据后返回二维码图片 Jie 20151126
     * @param  string  $url     [生成链接地址]
     * @param  string  $outfile [输出图片类型]
     * @param  integer $level   [容错级别]
     * @param  integer $size    [图片大小]
     * @return [type]           [description]
     */
    public function qrcode(){
        $qrcode = new \Libm\phpqrcode\qrcodeApi();
        $qrcode->text = trim(I('get.url'));
        echo $qrcode->png();
    }

    /**
     * 再次下单  视图 ok
     * @return [type] [description]
     */
    public function newOrder(){
        //生成一个一次性的令牌以防止重复提交表单
        $_SESSION['token'] = md5(microtime(true));

        // session('ship',NULL);   //清除session
        $id = I('get.id');
        $user_id = session('mkuser.uid');

        $Q_no = I('get.Q_no');

        // dump($id);
        // dump($Q_no);
        // die;

        // if(empty($id)){
        //     $id = 0;
        // }

        $Wclient = $this->Wclient;
        $res = $Wclient->_newOne($id, $Q_no);

        // dump($res);
        // die;

		if(!$res){
			echo '<h3>该单在打单时出现问题，请与店员或客服联系，给你带来不便，敬请原谅</h3>';
			die;
		}

        $tranline = $this->tranline;



        $category_list = array();
        $Host = C('Redis')['Host'];
        $Port = C('Redis')['Port'];
        $Auth = C('Redis')['Auth'];
        try{
            $redis = new \Redis();
            $redis->connect($Host,$Port,$overtime);
            $redis->auth($Auth);

            $category_list = unserialize($redis->get('category_list'));
        }catch(\RedisException $e){
            
        }

        if(empty($category_list)){
            $this->assign('category_list', "{}");
        }else{
            $this->assign('category_list', json_encode($category_list));
        }




        $ID_TYPE = C('ID_TYPE');//证件类型

        /* 查询所有类别并整理 */
        // $cat_list = $Wclient->cat_list();//查询所有类别
        // $cat_list = getTree($cat_list);//将普通数据转成树形结构
        // getTree(null);//上面调用完一次后重置静态变量

        // $naw = array();
        // foreach($cat_list as $k=>$item){
        //     if($item['level'] == '0'){
        //         $naw[$item['id']] = $item;
        //     }
            
        // }

        // foreach($naw as $k1=>$v1){
        //     foreach($cat_list as $k2=>$v2){
        //         if($v2['fid'] == $v1['id']){
        //             $naw[$k1]['child'][] = $v2;
        //         }
        //     }
        // }
        /* 查询所有类别并整理 */

        // self::assign('naw',$naw);   //归类好的所有类别列表
        self::assign('TranKd',$res['info']['TranKd']);     //线路id
        self::assign('tranline',$tranline);
        self::assign('info',$res['info']);
        self::assign('type','newOrder');   //是否为再次下单页面发起的请求
        self::assign('user_id',$user_id);
        self::assign('ID_TYPE',$ID_TYPE);//证件类型
        $this->display();
    }

    /**
     * 修改 视图 ok
     * @return [type] [description]
     */
    public function edit(){


        $category_list = array();
        $Host = C('Redis')['Host'];
        $Port = C('Redis')['Port'];
        $Auth = C('Redis')['Auth'];
        try{
            $redis = new \Redis();
            $redis->connect($Host,$Port,$overtime);
            $redis->auth($Auth);

            $category_list = unserialize($redis->get('category_list'));
        }catch(\RedisException $e){
            
        }
        // dump($category_list);
        if(empty($category_list)){
            $this->assign('category_list', "{}");
        }else{
            $this->assign('category_list', json_encode($category_list));
        }

        

        $id   = (I('get.id')) ? trim(I('get.id')) : '';
        //用于判断是否经由step_two发起的修改请求，是有别于正常途径的修改的
        $step = (I('get.step')) ? trim(I('get.step')) : '';

        //检查是否传入ID
        if($id == ''){
            $this->error(L('wrong_operate'),U('Member/index'),3);
        }

        $user_id = session('mkuser.uid');

        $Wclient = $this->Wclient;
        $res = $Wclient->_edit($id);


        //如果未填写身份证，则身份证图片不可能存在（如果存在，其实那是一个错误的记录）
		if(empty($res['info']['idno'])){
			$res['info']['front_file_name'] = '';
			$res['info']['back_file_name'] = '';
			$res['info']['front_id_img'] = '';
			$res['info']['back_id_img'] = '';
		}

        // dump($res);

        //验证订单，验证不通过则跳转错误，不显示页面
        if($res['info']['pay_state'] == '1'){
            $this->error(L('wrong_operate'),U('Member/index'),3);exit;
        }
        // $res[0]['id_img'] = ADMIN_JCM.$res[0]['id_img'];

        // session('ship',$res[0]['random_code']);   //获取的数据都存到session.ship中

        $tranline = $this->tranline;

        $ID_TYPE = C('ID_TYPE');//证件类型

        /* 查询所有类别并整理 */
        // $cat_list = $Wclient->cat_list();//查询所有类别
        // $cat_list = getTree($cat_list);//将普通数据转成树形结构
        // getTree(null);//上面调用完一次后重置静态变量

        // $naw = array();
        // foreach($cat_list as $k=>$item){
        //     if($item['level'] == '0'){
        //         $naw[$item['id']] = $item;
        //     }
            
        // }

        // foreach($naw as $k1=>$v1){
        //     foreach($cat_list as $k2=>$v2){
        //         if($v2['fid'] == $v1['id']){
        //             $naw[$k1]['child'][] = $v2;
        //         }
        //     }
        // }
        /* 查询所有类别并整理 */

        // self::assign('naw',$naw);   //归类好的所有类别列表

            // dump($res['info']);

        self::assign('TranKd',$res['info']['TranKd']);     //线路id

        self::assign('tranline',$tranline); //全部线路类型
        self::assign('info',$res['info']);   //订单信息
        self::assign('type','edit');   //是否为编辑页面发起的请求
        self::assign('user_id',$user_id);   //用户id
        self::assign('id',$id);   //订单ID
        self::assign('step',$step);   //用于判断是否经由step_two发起的修改请求，是有别于正常途径的修改的
        self::assign('ID_TYPE',$ID_TYPE);   //证件类型

        $this->display();
    }


    /**
     * 用于编辑的时候删除某一行货品声明
     * @return [type] [description]
     */
    public function del(){

        if(!IS_AJAX){
            $result = array('state'=>'404','msg'=>L('illegal_operation'));
            return $result;
            die;
        }

        $oid = I('post.ttc');

        $Wclient = $this->Wclient;

        $result = $Wclient->delete($oid);
        
        //根据多语言输出错误信息
        $result['msg'] = L($result['code']);

        $this->ajaxReturn($result);
    }


    //删除订单的同时删除购物小票
    //liao ya di
    public function del_shopping_receipt(){

        $oid = I('get.order_id');
        if(!empty($oid)){
            $this->del_shopping_rec($oid);
            $pie = new \HproseHttpClient(C('RAPIURL').'/Piecemeal');
            $pie->del_shopping_rec($oid);
        }

    }

    public function order_res_text(){
        $this->display();
    }

}