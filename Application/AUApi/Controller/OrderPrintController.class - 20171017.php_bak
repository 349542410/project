<?php
/**
 * 打印系统  服务器端
 */
namespace AUApi\Controller;
use Think\Controller\HproseController;
class OrderPrintController extends HproseController{

	//查询未打印的订单总数
	public function _count($where){

		$count = M('TranUlist')->where($where)->count();
		return $count;
	}

	//查询未打印的订单信息和商品信息
	public function _list($where, $p, $ePage){

		$list = M('TranUlist')->field('id,receiver,province,city,town,TranKd')->where($where)->order('id asc')->page($p.','.$ePage)->select();

		if(count($list) > 0){
			$ids = array();
			foreach($list as $key=>$item){
				$ids[] = $item['id'];
			}

			//订单ID集
			$ids = implode(',',$ids);

			$map['lid'] = array('in',$ids);
			$info = M('TranUorder')->field('lid,detail,number')->where($map)->select();//根据ID集找出所有对应的商品

			//把对应的商品整合到订单中
			foreach($info as $k1=>$v1){

				foreach($list as $k2=>$v2){

					if($v1['lid'] == $v2['id']){
						
						$list[$k2]['goods'][$k1]['detail'] = $v1['detail'];
						$list[$k2]['goods'][$k1]['number'] = $v1['number'];

						sort($list[$k2]['goods']);//数组键值重新以升序方式对数组排序
					}
				}
			}
		}
		
    	return $list;
	}

	/**
	 * 获取打印资料
	 * @param  [type] $id                [订单ID]
	 * @param  [type] $RMB_Free_Duty     [人民币免税金额额度]
	 * @param  [type] $US_TO_RMB_RATE    [美元和人民币汇率]
	 * @return [type]         [description]
	 */
	public function _info($id, $RMB_Free_Duty, $US_TO_RMB_RATE){

		//订单信息
		$info = M('TranUlist')->where(array('id'=>$id))->find();

		//查无数据
		if(!$info) return false;

		//查询该线路信息
		$center = M('TransitCenter')->where(array('id'=>$info['TranKd']))->find();

		$tax = 0;//税金总金额
		//检查该线路的 bc_state 是否为1
		if($center['bc_state'] == '1'){
			//订单相关商品信息
			$goods = M('TranUorder t')->field('t.oid,t.lid,t.number,t.weight,t.remark,t.auto_Indent1,t.auto_Indent2,p.show_name,p.name as detail,p.brand,p.hs_code,p.hgid,p.price,p.coin,p.unit,p.source_area,p.specifications,p.barcode,p.unit,p.source_area,c.cat_name as catname,c.price as tax_price')->join('left join mk_product_list p on p.id = t.product_id')->join('left join mk_category_list c on c.id = p.cat_id')->where(array('t.lid'=>$info['id']))->select();

			$tol_price = 0;//商品总金额，bc_state 为1 的订单，商品的金额是用美快后台货品管理里面定义的申报金额

			foreach($goods as $item){
				$tax += floatval($item['number']) * floatval($item['tax_price']);//统计税金 以便保存
				$tol_price += floatval($item['number']) * floatval($item['price']);//统计商品总价值 以便保存
			}

			$info['price'] = sprintf("%.2f", $tol_price);//商品总价值
			
		}else if($center['cc_state'] == '1'){
			//订单相关商品信息
			$goods = M('TranUorder t')->field('t.*, c.price as tax_rate')->join('left join mk_category_list c on c.id = t.category_two')->where(array('t.lid'=>$info['id']))->select();

            //tax_rate 为百分比
            if($center['tax_kind'] == '1'){

                //需要根据二级类别的税率计算税金
				foreach($goods as $k=>$item){
					$tax += floatval($item['number']) * floatval($item['tax_rate']) * floatval($item['price']) / 100;//统计税金 以便保存
					$goods[$k]['show_name'] = $item['detail'];
				}

				//根据汇率计算出美元免税的额度
	            $free_duty = sprintf("%.2f", floatval($RMB_Free_Duty) / floatval($US_TO_RMB_RATE));

				// 2017-09-19  整单税金<=7美元的时候，直接免税；>7的直接显示所计算得到的税金（不用减7）
				if($tax <= floatval($free_duty)){
					$tax = 0;
				}
				
            }else{//tax_rate 为固定值

                //需要根据二级类别的税值计算税金
				foreach($goods as $k=>$item){
					$tax += floatval($item['number']) * floatval($item['tax_rate']);//统计税金 以便保存
					$goods[$k]['show_name'] = $item['detail'];
				}
            }

		}else{
			//订单相关商品信息
			$goods = M('TranUorder')->where(array('lid'=>$info['id']))->select();
			foreach($goods as $k=>$item){
				$goods[$k]['show_name'] = $item['detail'];
			}
		}

		//订单相关的商品信息，并入到订单信息的goods里面
		$info['goods'] = $goods;//商品列表
		$info['tax']   = sprintf("%.2f", $tax);//总税金
		
		return $info;
	}

	/**
	 * 页面返回相关资料（保存称重等资料）
	 * @param  [type] $id     [订单ID]
	 * @param  [type] $weight [称重重量]
	 * @param  [type] $time   [称重时间]
	 * @return [type]         [description]
	 */
	public function _step_one($id, $weight, $time, $Web_Config, $RMB_Free_Duty, $US_TO_RMB_RATE){

		$Model = M();   //实例化
        $Model->startTrans();//开启事务

		$info = M('TranUlist')->where(array('id'=>$id))->find();

		if(!$info){
			return array('state'=>'no', 'msg'=>'订单不存在', 'lng'=>'order_not_exist');
		}

		$trankd = $info['TranKd'];

		$Web_Config = (isset($Web_Config[$trankd])) ? $Web_Config[$trankd] : '';

        //判断传来的中转线路ID是否有对应的配置信息
        if($Web_Config == ''){
            return array('state'=>'no', 'msg'=>'该中转线路尚未配置', 'lng'=>'tranline_not_exist');
        }

		//检查订单是否已经支付
		if($info['pay_state'] == '1'){
			$rdata = array('id'=>$info['id'], 'weight' => $info['weight'], 'time'=>$info['weigh_time'], 'ctime'=>$info['ctime'], 'freight'=>$info['freight'], 'weigh_config'=>$Web_Config);
			//保存称重资料且计费成功后，返回
			return array('state'=>'paid','msg'=>'订单已支付，可直接打印', 'lng'=>'order_already_paid', 'rdata'=>$rdata);
		}

		//将状态为 未打印 的订单 锁定状态为打印中
		if($info['print_state'] == 0){
			//立即锁定订单的打印状态为打印中
			M('TranUlist')->where(array('id'=>$id))->setField('print_state',10);
		}

		$heavy     = $Web_Config['Weight'];//首重重量
		$Price     = $Web_Config['Price'];//首重价格
		$Unit      = $Web_Config['Unit'];//续重计费单位
		$UnitPrice = $Web_Config['UnitPrice'];//续重每单位金额
		$Discount  = $Web_Config['Discount'];//折扣比例
		$Charge    = $Web_Config['Charge'];//服务费，手续费

		//实际称重>首重
		if($weight > $heavy){

			//超出的重量 = 实际重量 - 首重
			$surp = sprintf("%.2f", (floatval($weight) - floatval($heavy)));

			//续重计费数量 = 超出的重量 / 续重计费单位 -> 如果存在小数则+1
			$surp_num = sprintf("%.2f", ceil(floatval($surp) / floatval($Unit)));

			//续重计费数量*续重每单位金额
			$amount = sprintf("%.2f", (floatval($UnitPrice) * floatval($surp_num)));
			
			//总金额 = 首重价格 + 续重计费数量*续重每单位金额
			$freight = sprintf("%.2f", (floatval($amount) + floatval($Price)));

			//计算折扣优惠，且合算服务费之后的运费金额(实收金额)
			$cost = sprintf("%.2f", ((1 - floatval($Discount)) * floatval($freight) + floatval($Charge)));
			
		}else{

			//由于实际称重重量没有超过首重，所有运费只收首重运费的金额
			$cost = sprintf("%.2f", ((1 - floatval($Discount)) * floatval($Price) + floatval($Charge)));

		}

		$center = M('TransitCenter')->where(array('id'=>$info['TranKd']))->find();
		
		$tax = 0;//税金总金额
		//是否为 顺丰BC  id=5 ，需要计算商品的税金总额(商品数量*税金单价，美元)
		if($center['bc_state'] == '1'){

			//订单所含的商品数量以及对应的税金单价
			$goods = M('TranUorder t')->field('t.oid,t.number,c.price as tax_price')->join('left join mk_category_list c on c.id = t.category_two')->where(array('t.lid'=>$info['id']))->select();

			//统计税金 以便保存
			foreach($goods as $item){
				$tax += floatval($item['number']) * floatval($item['tax_price']);
			}

		}else if($center['cc_state'] == '1'){
			//订单相关商品信息
			$goods = M('TranUorder t')->field('t.oid,t.price,t.number,c.price as tax_rate')->join('left join mk_category_list c on c.id = t.category_two')->where(array('t.lid'=>$info['id']))->select();

            //tax_rate 为百分比
            if($center['tax_kind'] == '1'){

                //需要根据二级类别的税率计算税金
				foreach($goods as $item){
					$tax += floatval($item['number']) * floatval($item['tax_rate']) * floatval($item['price']) / 100;//统计税金 以便保存
				}

				//根据汇率计算出美元免税的额度
	            $free_duty = sprintf("%.2f", floatval($RMB_Free_Duty) / floatval($US_TO_RMB_RATE));

				// 2017-09-19  整单税金<=7美元的时候，直接免税；>7的直接显示所计算得到的税金（不用减7）
				if($tax <= floatval($free_duty)){
					$tax = 0;
				}
            }else{//tax_rate 为固定值

                //需要根据二级类别的税值计算税金
				foreach($goods as $item){
					$tax += floatval($item['number']) * floatval($item['tax_rate']);//统计税金 以便保存
				}
            }

		}

		$tax = sprintf("%.2f", $tax);

		$data = array();
		$data['weigh_time'] = $time;//称重时间
		$data['weight']     = $weight;//称重实际重量
		$data['freight']    = $cost;//实收运费
		$data['discount']   = sprintf("%.2f", $Discount);//折扣比例
		$data['charge']     = sprintf("%.2f", $Charge);//服务费，手续费
		$data['tax']        = $tax;//统计税金  所有商品加载一起的税金，美元

		$t_data = array();
		$t_data['freight']   = $cost;//消费金额
		$t_data['discount']  = sprintf("%.2f", $Discount);//折扣比例
		$t_data['fee']       = sprintf("%.2f", $Charge);//服务费，手续费
		$t_data['tax']       = $tax;//统计税金  所有商品加载一起的税金，美元

		//保存称重资料且计费成功后
		$save_order = M('TranUlist')->where(array('id'=>$id))->save($data);//更新部分字段

		$save_record = M('WlorderRecord')->where(array('order_no'=>$info['order_no']))->save($t_data);

		if($save_order !== false && $save_record !== false){

			// 检查记录
			$check_logs = M('ULogs')->where(array('order_no'=>$info['order_no'],'state'=>'3001'))->find();

			//记录不存在，则新增，这个记录只需要保存第一次成功称重的记录
			if(!$check_logs){
				$logs = array();
				$logs['order_no']    = $info['order_no']; //内部订单号
	        	$logs['content']     = '您的订单已经称重完毕，请等待系统确认';
	        	$logs['create_time'] = $time;  //称重时间
	        	$logs['state']       = '3001';
	        	M('ULogs')->add($logs);//保存订单操作记录
			}

			$Model->commit();//提交事务成功
			return array('state'=>'yes', 'cost'=>$cost, 'tax'=>$tax, 'ctime'=>$info['ctime'], 'weigh_config'=>$Web_Config);
		}else{
			$Model->rollback();//事务有错回滚

			return array('state'=>'no', 'msg'=>'保存称重数据失败','lng'=>'failed_to_save_weight');
		}

	}

	/**
	 * [订单支付]
	 * @param  [type] $sn      [订单ID]
	 * @param  [type] $user_id [账户ID]
	 * @return [type]          [description]
	 */
	public function _step_two($id, $user_id){

		$user = M('UserList')->where(array('id'=>$user_id))->find();
		if(!$user){
			return array('state'=>'no','msg'=>'账户不存在', 'lng'=>'user_not_exist');
		}

		// //审核账户状态  账户成功登陆的话，应该不需要再审查
		// if($user['status'] != '1'){
		// 	return array('state'=>'no','msg'=>'账户审核未通过','info'=>'user_not_examine');
		// }

		$info = M('TranUlist')->where(array('id'=>$id,'user_id'=>$user_id))->find();  //根据此内部订单号和账户ID找出订单信息
		if(!$info){
			return array('state'=>'no','msg'=>'订单不存在', 'lng'=>'order_not_exist');
		}

		// 已经扣费成功的，则直接跳过 step_two ，进入step_three
		//拦截位置  注意：这里，如果订单是已支付，则可以提供再次打印订单的，但不会重复扣费
		if($info['pay_state'] == '1'){
        	//支付已经支付了，将支付单号等必要信息返回给打印系统
        	$redata = array();
			$redata['id']      = $id;
			$redata['user_id'] = $user_id;
			$redata['paykind'] = $info['paykind'];
			$redata['payno']   = $info['payno'];
			$redata['paytime'] = $info['paytime'];
			$redata['balance'] = sprintf("%.2f", $user['amount']);
			return array('state'=>'paid','msg'=>'订单已支付，请直接打印', 'rdata'=>$redata, 'lng'=>'order_already_paid');
		}

		$user_amount = floatval($user['amount']); //账户余额，转浮点型数值

		if($user_amount == 0){
			return array('state'=>'no','msg'=>'账户余额为零，请先充值', 'lng'=>'balance_not_enough');
		}

		$freight = $info['freight'];//订单中的已经计算好的实收运费
		$tax     = $info['tax'];//订单中的已经计算好的税金总额
		$cost    = floatval($freight) + floatval($tax);

        if($user_amount < $cost){
        	return array('state'=>'no','msg'=>'账户余额不足以支付订单，请先充值', 'lng'=>'balance_not_enough_to_pay');
        }

        $user_amount = $user_amount - $cost; //余额-消费金额

        //查询订单相关的所有商品声明的价格和数量
        $pro_list = M('TranUorder')->field('price,number')->where(array('lid'=>$info['id']))->select();

/*        //支付订单的时候，才把订单相关的商品声明的总价值输入到订单的总价字段上保存    用户下单的时候，已经统计过，所有这里不需要了
        $goodsPrice = 0;//商品总价
        $goodsNum   = 0;//商品总数量
        foreach($pro_list as $vo){
            $goodsPrice += (intval($vo['number']) * floatval($vo['price']));
            $goodsNum += intval($vo['number']);
        }*/

        $Model = M();   //实例化
        $Model->startTrans();//开启事务

        //更新账户余额
        $save_user = M('UserList')->where(array('id'=>$user['id']))->setField('amount',$user_amount);

		$payno   = build_sn();//创建支付单号
		$paytime = date('Y-m-d H:i:s');//支付时间

		$order_data['pay_state'] = 1;  //支付状态
/*		$order_data['price']     = $goodsPrice;//所有商品声明的总价值
		$order_data['number']    = $goodsNum;//所有商品声明的总数量*/
		$order_data['payno']     = $payno;//支付单号
		$order_data['paytime']   = $paytime;//支付时间

		//更新物流订单
        $save_order = M('TranUlist')->where(array('random_code'=>$info['random_code'],'user_id'=>$info['user_id']))->save($order_data);

		$t_data['pay_state']        = 1;  //支付状态
		$t_data['payno']            = $payno;//支付单号
		$t_data['paytime']          = $paytime;//支付时间
		$t_data['user_balance_usa'] = $user_amount;//成功消费后的余额  20171017

		//更新消费记录的信息
		$save_record = M('WlorderRecord')->where(array('order_no'=>$info['order_no']))->save($t_data);

        if($save_user == true && $save_order == true && $save_record == true){

			$logs = array();
			$logs['order_no']    = $info['order_no']; //内部订单号
        	$logs['content']     = '您的订单已经支付成功，等待打印确认';
        	$logs['create_time'] = $paytime;  //支付时间
        	$logs['state']       = '3002';
        	M('ULogs')->add($logs);//保存订单操作记录

        	//支付成功后，将支付单号等必要信息返回给打印系统
        	$redata = array();
			$redata['paykind'] = $info['paykind'];
			$redata['payno']   = $payno;
			$redata['paytime'] = $paytime;
			$redata['balance'] = sprintf("%.2f", $user_amount);

        	//支付订单后，扣款次数+1
        	M('WlorderRecord')->where(array('order_no'=>$info['order_no']))->setInc('deduct_num',1);
        	$Model->commit();//提交事务成功
        	return array('state'=>'yes','msg'=>'支付成功','t_data'=>$info, 'redata'=>$redata, 'lng'=>'pay_success');
        }else{
        	$Model->rollback();//事务有错回滚
        	return array('state'=>'no','msg'=>'支付失败，如需帮助请咨询客服', 'lng'=>'pay_failed');
        }
	}

	/**
	 * [保存打印状态]
	 * @param  [type] $id      [订单ID]
	 * @param  [type] $status  [打印状态]
	 * @param  [type] $time    [打印时间]
	 * @return [type]          [description]
	 */
	public function _step_three($id, $status, $time, $MKNO, $STNO){

		$time = date('Y-m-d H:i:s');//打印时间 用服务器的时间

		$info  = M('TranUlist')->where(array('id'=>$id))->find();

		if(!$info){
			return array('state'=>'no', 'msg'=>'订单不存在', 'lng'=>'order_not_exist');
		}

		$Model = M();   //实例化
        $Model->startTrans();//开启事务

		$data = array();
		$data['print_state'] = $status;
		$data['print_time']  = $time;
		$data['MKNO']        = $MKNO;
		$data['STNO']        = $STNO;
		
		$save = M('TranUlist')->where(array('id'=>$id))->save($data);

		if($save !== false){

			$content = '您的订单已经打印成功';

			// 检查记录
			$check_logs = M('ULogs')->where(array('order_no'=>$info['order_no'],'state'=>'3003'))->find();

			//记录不存在，则新增，这个记录只需要保存第一次成功称重的记录
			if(!$check_logs){
				$logs = array();
				$logs['order_no']    = $info['order_no']; //内部订单号
	        	$logs['content']     = $content;	//文字说明
	        	$logs['create_time'] = $time;  //打印时间
	        	$logs['state']       = '3003';
	        	M('ULogs')->add($logs);//保存订单操作记录
			}

			unset($data['MKNO']);
			unset($data['STNO']);
			
			$data['order_no'] = $info['order_no']; //内部订单号
			$data['content'] = $content; //文字说明

			// 打印历史记录全部保存起来
			M('PrintRecord')->add($data);

			//支付成功打印后，打印次数记录+1
			M('TranUlist')->where(array('id'=>$id))->setInc('print_num',1);

			$Model->commit();//提交事务成功

			return array('state'=>'yes', 'msg'=>'订单打印记录保存成功', 'lng'=>'print_success');
		}else{
			
			$Model->rollback();//事务有错回滚

			return array('state'=>'no', 'msg'=>'订单打印记录保存失败', 'lng'=>'print_failed');
		}
	}

	// 获取账户余额
	public function _get_user_balance($user_id){
		$user = M('UserList')->where(array('id'=>$user_id))->find();
		if(!$user){
			return false;
		}else{
			return $user['amount']; //账户余额
		}
	}
}